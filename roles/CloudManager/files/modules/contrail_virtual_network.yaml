#!/usr/bin/python
#
# BSD 3-Clause License
#
# Copyright (c) 2017, Bernard Tsai <bernard@tsai.eu>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status':           ['preview'],
    'supported_by':     'community'
}

DOCUMENTATION = '''
---
module: contrail_virtual_network

short_description: Module to manage contrail virtual networks.

version_added: "2.4"

author: "Bernard Tsai (bernard@tsai.eu)"

description:
    - "Allows to create, configure and delete virtual networks."

options:
    contrail_url:
        description:
            - URL for the contrail API endpint
        required: true
    keystone_url:
        description:
            - URL for the keystone API endpint
        required: true
    username:
        description:
            - User credentials.
        required: true
    password:
        description:
            - Password credentials.
        required: true
    project:
        description:
            - Project name or ID containing the network (name admin-only).
        required: true
    network:
        description:
            - Name to be assigned to the network.
        required: true
    state:
        description:
            - Indicate desired state of the resource.
        choices:  ['initial','inactive', 'active']
        required: false
        default:  active
    ipv4_prefix:
        description:
            -  IPv4 subnet network prefix
    ipv4_length:
        description:
            -  IPv4 subnet network prefix length
    ipv4_start:
        description:
            -  IPv4 subnet start of allocation pool
    ipv4_end:
        description:
            -  IPv4 subnet end of allocation pool
    ipv4_gateway:
        description:
            -  IPv4 subnet gateway address
    ipv4_dns:
        description:
            -  IPv4 subnet dns address
    ipv6_prefix:
        description:
            -  IPv6 subnet network prefix
    ipv6_length:
        description:
            -  IPv6 subnet network prefix length
    ipv6_start:
        description:
            -  IPv6 subnet start of allocation pool
    ipv6_end:
        description:
            -  IPv6 subnet end of allocation pool
    ipv6_gateway:
        description:
            -  IPv6 subnet gateway address
    ipv6_dns:
        description:
            -  IPv6 subnet dns address
    route_target:
        description:
            - Route target
        required: false
'''

EXAMPLES = '''
# Create an externally accessible network named 'ext_network'.
- contrail_virtual_network:
    contrail_url  ...
    keystone_url  ...
    username      ...
    password      ...
    network:      ext_network
    project:      test_project
    ipv4_prefix:  192.168.178.1
    ipv4_length:  24
    ipv4_start:   192.168.178.128
    ipv4_end:     192.168.178.250
    route_target: 65412:12
    state:        active
'''

RETURN = '''
network:
    description:
        - Name to be assigned to the network.
project:
    description:
        - Project name or ID containing the network (name admin-only).
state:
    description:
        - Indicate desired state of the resource.
ipv4_prefix:
    description:
        -  IPv4 subnet network prefix
ipv4_length:
    description:
        -  IPv4 subnet network prefix length
ipv4_start:
    description:
        -  IPv4 subnet start of allocation pool
ipv4_end:
    description:
        -  IPv4 subnet end of allocation pool
ipv4_gateway:
    description:
        -  IPv4 subnet gateway address
ipv4_dns:
    description:
        -  IPv4 subnet dns address
ipv6_prefix:
    description:
        -  IPv6 subnet network prefix
ipv6_length:
    description:
        -  IPv6 subnet network prefix length
ipv6_start:
    description:
        -  IPv6 subnet start of allocation pool
ipv6_end:
    description:
        -  IPv6 subnet end of allocation pool
ipv6_gateway:
    description:
        -  IPv6 subnet gateway address
ipv6_dns:
    description:
        -  IPv6 subnet dns address
route_target:
    description:
        - Route target
changed:
    description:
        - Indicates if anything has been changed
action:
    description:
        - The action which has been performed
'''

import yaml
import traceback
import ipaddress

from ansible.module_utils.basic import AnsibleModule

try:
    import pycontrail.client as client
    import pycontrail.gen.resource_client

    from pycontrail.gen.resource_client import VirtualNetwork, NetworkIpam
    from pycontrail.gen.resource_xsd    import VnSubnetsType, IpamSubnetType, SubnetType, RouteTargetList, AllocationPoolType
    from pycontrail.exceptions          import NoIdError

    HAS_CONTRAIL = True
except ImportError:
    traceback.print_exc()
    HAS_CONTRAIL = False


# ------------------------------------------------------------------------------
#
# class Action:
#
# Manages the lifecycle of contrail virtual networks.
#
# Algorithm (in method 'run'):
#  - validate
#  - determine target configuration
#  - connect to contrail API
#  - read network configuration
#  - read ipam configuration
#  - determine current configuration
#  - if network does not exist and desired state is active => create network
#  - if network exists and desired state is not active     => delete network
#  - if network exists and desired state is active =>
#       determine if we need to update/redeploy/maintain network and
#       possibly change the network accordingly
#
# ------------------------------------------------------------------------------
#
# ToDo:
# - seperate authentication parameters from network parameters
# - remove IPAM if last virtual network is destroyed
# - redeploys too often
#
# ------------------------------------------------------------------------------
class Action():
    """Manage lifecycle of networks"""

    def __init__(self, module):
        """Initialize"""
        self.module  = module
        self.conn    = None
        self.network = None
        self.ipam    = None
        self.result  = {}
        self.target  = {}
        self.current = {}
        self.changed = False
        self.action  = "None"

    def run(self):
        """Execute required action"""
        self.validate()
        self.get_target()
        self.connect()
        self.read_network()
        self.read_ipam()
        self.get_current()

        # change/update network to desired state
        if self.network:
            if self.module.params["state"] != "active":
                self.action = "Delete"
                self.delete_network()
            else:
                self.action = self.compare()
                # update
                if self.action == "Update":
                    self.update_network()
                # redeploy
                elif self.action == "Redeploy":
                    self.delete_network()
                    self.create_network()
                # no change
                else:
                    pass
        else:
            if self.module.params["state"] == "active":
                self.action = "Create"
                self.create_network()

    def validate(self):
        """Validate parameters"""
        params = self.module.params

        # check IPv4 network
        if params["ipv4_prefix"] or params["ipv4_length"]:
            net_addr = str(params["ipv4_prefix"]) + "/" + str(params["ipv4_length"])
            try:
                ipv4_cidr = ipaddress.IPv4Network( net_addr )
            except Exception:
                self.module.fail_json(msg='Invalid parameters ' + net_addr)
        else:
            ipv4_cidr = None

        # check IPv6 network
        if params["ipv6_prefix"] or params["ipv6_length"]:
            net_addr = str(params["ipv6_prefix"]) + "/" + str(params["ipv6_length"])
            try:
                ipv6_cidr = ipaddress.IPv6Network( net_addr )
            except Exception:
                self.module.fail_json(msg='Invalid parameters B')
        else:
            ipv6_cidr = None

        # check ip addresses
        for suffix in ['prefix','gateway','start','end','dns']:
            addr_name = "ipv4_" + suffix
            addr      = params[addr_name]
            if addr:
                try:
                    ipaddr = ipaddress.IPv4Address( addr )
                    if not ipaddr in ipv4_cidr:
                        self.module.fail_json(msg='Invalid parameters C')
                except Exception:
                    print( suffix )
                    traceback.print_exc()
                    self.module.fail_json(msg='Invalid parameters D')

            addr_name = "ipv6_" + suffix
            addr      = params[addr_name]
            if addr:
                try:
                    ipaddr = ipaddress.IPv6Address( addr )
                    if not ipaddr in ipv6_cidr:
                        self.module.fail_json(msg='Invalid parameters E')
                except Exception:
                    self.module.fail_json(msg='Invalid parameters F')

        # check IPv4 start and end addresses
        if params["ipv4_start"] or params["ipv4_end"]:
            try:
                ipv4_start = ipaddress.IPv4Address( params["ipv4_start"] )
                ipv4_end   = ipaddress.IPv4Address( params["ipv4_end"] )
                if ipv4_start > ipv4_end:
                    self.module.fail_json(msg='Invalid parameters G')
            except Exception:
                self.module.fail_json(msg='Invalid parameters H')

        # check IPv6 start and end addresses
        if params["ipv6_start"] or params["ipv6_end"]:
            try:
                ipv6_start = ipaddress.IPv6Address( params["ipv6_start"] )
                ipv6_end   = ipaddress.IPv6Address( params["ipv6_end"] )
                if ipv6_start > ipv6_end:
                    self.module.fail_json(msg='Invalid parameters')
            except Exception:
                self.module.fail_json(msg='Invalid parameters')

    def get_target(self):
        """Determine desired state"""
        params = self.module.params

        self.target["route_target"] = params.get( "route_target", "" )

        self.target["ipv4_prefix"]  = params.get( "ipv4_prefix",  "" )
        self.target["ipv4_length"]  = params.get( "ipv4_length",  "" )
        self.target["ipv4_gateway"] = params.get( "ipv4_gateway", "" )
        self.target["ipv4_start"]   = params.get( "ipv4_start",   "" )
        self.target["ipv4_end"]     = params.get( "ipv4_end",     "" )
        self.target["ipv4_dns"]     = params.get( "ipv4_dns",     "" )

        self.target["ipv6_prefix"]  = params.get( "ipv6_prefix",  "" )
        self.target["ipv6_length"]  = params.get( "ipv6_length",  "" )
        self.target["ipv6_gateway"] = params.get( "ipv6_gateway", "" )
        self.target["ipv6_start"]   = params.get( "ipv6_start",   "" )
        self.target["ipv6_end"]     = params.get( "ipv6_end",     "" )
        self.target["ipv6_dns"]     = params.get( "ipv6_dns",     "" )

    def connect(self):
        """Connect to the contrail API endpoint"""
        try:
            contrail_url = self.module.params['contrail_url']
            keystone_url = self.module.params['keystone_url']
            username     = self.module.params['username']
            password     = self.module.params['password']
            project      = self.module.params['project']

            self.conn = client.Client(
                    url         = contrail_url,
                    auth_params = { 'type':        'keystone',
                                    'auth_url':    keystone_url,
                                    'username':    username,
                                    'password':    password,
                                    'tenant_name': project } )
        except Exception:
            traceback.print_exc()
            self.module.fail_json(msg='Can not connect to the contrail API endpoint')

    def read_network(self):
        """Read network information"""

        # try to read the network
        try:
            project = self.module.params['project']
            network = self.module.params['network']
            fq_name = ['default-domain', project, project + "_" + network]

            self.network = self.conn.virtual_network_read( fq_name=fq_name )
        except pycontrail.exceptions.NoIdError:
            pass
        except Exception:
            self.module.fail_json(msg='Could not read the network information')

    def read_ipam(self):
        """Read IPAM"""

        try:
            project = self.module.params['project']
            network = self.module.params['network']
            fq_name = ['default-domain', project, project + "-ipam" ]

            self.ipam = self.conn.network_ipam_read( fq_name=fq_name )
        except pycontrail.exceptions.NoIdError:
            pass
        except Exception:
            self.module.fail_json(msg='Could not read the IPAM information')

    def get_current(self):
        """Determine current state"""
        route_target = ""
        ipv4_prefix  = ""
        ipv4_length  = ""
        ipv4_gateway = ""
        ipv4_start   = ""
        ipv4_end     = ""
        ipv4_dns     = ""
        ipv6_prefix  = ""
        ipv6_length  = ""
        ipv6_gateway = ""
        ipv6_start   = ""
        ipv6_end     = ""
        ipv6_dns     = ""

        # indicator for a network found
        found = (self.network is not None)

        # save network information
        if found:
            try:
                targets      = self.network.get_route_target_list()
                target       = targets.get_route_target() if targets else None
                route_target = target[0][7:] if target else ""

                ipam_refs    = self.network.get_network_ipam_refs()                        # list of dictionaries
                ipam_ref     = ipam_refs[0] if ipam_refs else None                         # first dictionary
                vnsubnet     = ipam_ref["attr"] if ipam_ref else None                      # VnSubnetsType
                ipamsubnets  = vnsubnet.get_ipam_subnets() if vnsubnet else None           # list of IpamSubnetType

                if ipamsubnets:
                    for ipamsubnet in ipamsubnets:
                        gateway = ipamsubnet.get_default_gateway()             # gateway
                        dns     = ipamsubnet.get_dns_server_address()          # dns
                        pools   = ipamsubnet.get_allocation_pools()            # pools
                        pool    = pools[0] if pools else None                  # pool
                        start   = pool.get_start() if pool else ""             # start
                        end     = pool.get_end() if pool else ""               # end
                        subnet  = ipamsubnet.get_subnet()                      # subnet
                        prefix  = subnet.get_ip_prefix() if subnet else ""     # prefix
                        length  = subnet.get_ip_prefix_len() if subnet else "" # length

                        if "." in prefix:
                            ipv4_prefix  = prefix
                            ipv4_length  = length
                            ipv4_gateway = gateway
                            ipv4_start   = start
                            ipv4_end     = end
                            ipv4_dns     = dns
                        if ":" in prefix:
                            ipv6_prefix  = prefix
                            ipv6_length  = length
                            ipv6_gateway = gateway
                            ipv6_start   = start
                            ipv6_end     = end
                            ipv6_dns     = dns

            except Exception:
                traceback.print_exc()
                self.module.fail_json(msg='Could not read the network information')

        self.current["route_target"] = route_target
        self.current["ipv4_prefix"]  = ipv4_prefix
        self.current["ipv4_length"]  = ipv4_length
        self.current["ipv4_gateway"] = ipv4_gateway
        self.current["ipv4_start"]   = ipv4_start
        self.current["ipv4_end"]     = ipv4_end
        self.current["ipv4_dns"]     = ipv4_dns
        self.current["ipv6_prefix"]  = ipv6_prefix
        self.current["ipv6_length"]  = ipv6_length
        self.current["ipv6_gateway"] = ipv6_gateway
        self.current["ipv6_start"]   = ipv6_start
        self.current["ipv6_end"]     = ipv6_end
        self.current["ipv6_dns"]     = ipv6_dns

    def compare(self):
        for item in ["ipv4_prefix","ipv4_length","ipv4_start","ipv4_end",
                     "ipv4_gateway","ipv4_dns",
                     "ipv6_prefix","ipv6_length","ipv6_start","ipv6_end",
                     "ipv6_gateway","ipv6_dns"]:
            if self.current[item] != self.target[item]:
                return "Redeploy"

        for item in ['route_target']:
            if self.current[item] != self.target[item]:
                return "Update"

        return "None"

    def delete_network(self):
        """Delete an existing virtual network"""
        if self.module.check_mode:
            return

        self.changed = True

        try:
            self.conn.virtual_network_delete( id=self.network.get_uuid() )
        except Exception:
            traceback.print_exc()
            self.module.fail_json(msg='Could not delete virtual network')

    def create_network(self):
        """Create a new virtual network"""
        if self.module.check_mode:
            return

        self.changed = True

        project = self.module.params['project']
        network = self.module.params['network']

        try:
            # define virtual network
            fq_name = ['default-domain', project, project + "_" + network]
            vnet    = VirtualNetwork( fq_name[-1], parent_type = 'project', fq_name=fq_name  )

            # get IPAM and create it if required
            fq_name = ['default-domain', project, project + "-ipam" ]
            ipam    = NetworkIpam( fq_name[-1], parent_type = 'project', fq_name=fq_name )

            if not self.ipam:
                self.ipam = self.conn.network_ipam_create( ipam )

            # assign subnet
            if self.module.params["ipv4_prefix"]:
                prefix = self.module.params["ipv4_prefix"]
                length = int( self.module.params["ipv4_length"] )

                # define subnet
                subnet = IpamSubnetType(subnet = SubnetType(prefix, length))

                # add allocation pool
                if self.module.params["ipv4_start"]:
                    start = self.module.params["ipv4_start"]
                    end   = self.module.params["ipv4_end"]
                    pool = AllocationPoolType( start, end )
                    subnet.add_allocation_pools( pool )

                # add dns server address
                if self.module.params["ipv4_dns"]:
                    dns = self.module.params["ipv4_dns"]
                    subnet.set_dns_server_address( dns )

                # add gateway
                if self.module.params["ipv4_gateway"]:
                    gateway = self.module.params["ipv4_gateway"]
                    subnet.set_default_gateway( gateway )

                # add subnet to virtual network
                vsub = VnSubnetsType([subnet])

                vnet.add_network_ipam( ipam ,vsub )

            if self.module.params["ipv6_prefix"]:
                prefix = self.module.params["ipv6_prefix"]
                length = int( self.module.params["ipv6_length"] )

                # define subnet
                subnet = IpamSubnetType(subnet = SubnetType(prefix, length))

                # add allocation pool
                if self.module.params["ipv6_start"]:
                    start = self.module.params["ipv6_start"]
                    end   = self.module.params["ipv6_end"]
                    pool = AllocationPoolType( start, end )
                    subnet.add_allocation_pools( pool )

                # add dns server address
                if self.module.params["ipv6_dns"]:
                    dns = self.module.params["ipv6_dns"]
                    subnet.set_dns_server_address( dns )

                # add gateway
                if self.module.params["ipv6_gateway"]:
                    gateway = self.module.params["ipv6_gateway"]
                    subnet.set_default_gateway( gateway )

                # add subnet to virtual network
                vsub   = VnSubnetsType([subnet])

                vnet.add_network_ipam( ipam ,vsub )

            if self.module.params["route_target"]:
                route_target = "target:" + self.module.params["route_target"]

                rtl = RouteTargetList( [ route_target ] )

                vnet.set_route_target_list( rtl )

            self.conn.virtual_network_create( vnet )
        except Exception:
            traceback.print_exc()
            self.module.fail_json(msg='Could not create new virtual network')

    def update_network(self):
        """Update an existing virtual network"""
        if self.module.check_mode:
            return

        self.changed = True

        project = self.module.params['project']
        network = self.module.params['network']

        try:
            # define virtual network
            fq_name = ['default-domain', project, project + "_" + network]
            vnet    = VirtualNetwork( fq_name[-1], parent_type = 'project', fq_name=fq_name  )

            # update route target
            if self.module.params["route_target"]:
                route_target = "target:" + self.module.params["route_target"]

                rtl = RouteTargetList( [ route_target ] )

                vnet.set_route_target_list( rtl )

            self.conn.virtual_network_update( vnet )
        except Exception:
            traceback.print_exc()
            self.module.fail_json(msg='Could not update existing virtual network')

    def get_result(self):
        """Retrieve the results of the action"""
        self.result = {
            "network": self.module.params["network"],
            "project": self.module.params["project"],
            "state":   self.module.params["state"],
            "changed": self.changed,
            "action":  self.action
        }

        for attr in ["ipv4_prefix","ipv4_length","ipv4_start","ipv4_end",
                     "ipv4_gateway","ipv4_dns",
                     "ipv6_prefix","ipv6_length","ipv6_start","ipv6_end",
                     "ipv6_gateway","ipv6_dns"]:
            self.result[attr] = self.target[attr] if self.changed else self.current[attr]

        return self.result

# ------------------------------------------------------------------------------
def run_module():
    # define the available arguments/parameters
    # that a user can pass to the module
    module_args = dict(
        contrail_url = dict(type="str", required=True),
        keystone_url = dict(type="str", required=True),
        username     = dict(type="str", required=True),
        password     = dict(type="str", required=True),
        project      = dict(type="str", required=True),
        network      = dict(type="str", required=True),
        state        = dict(type="str", required=False),
        ipv4_prefix  = dict(type="str", required=False),
        ipv4_length  = dict(type="str", required=False),
        ipv4_gateway = dict(type="str", required=False),
        ipv4_start   = dict(type="str", required=False),
        ipv4_end     = dict(type="str", required=False),
        ipv4_dns     = dict(type="str", required=False),
        ipv6_prefix  = dict(type="str", required=False),
        ipv6_length  = dict(type="str", required=False),
        ipv6_gateway = dict(type="str", required=False),
        ipv6_start   = dict(type="str", required=False),
        ipv6_end     = dict(type="str", required=False),
        ipv6_dns     = dict(type="str", required=False),
        route_target = dict(type="str", required=False)
    )

    # the AnsibleModule object will be our abstraction working with Ansible
    # this includes instantiation, a couple of common attr would be the
    # args/params passed to the execution, as well as if the module
    # supports check mode
    module = AnsibleModule(
        argument_spec       = module_args,
        supports_check_mode = True
    )

    # check if required libraries are available
    if not HAS_CONTRAIL:
        module.fail_json(msg='contrail-python-api is required for this module')

    # create action and execute it
    action = Action( module )

    action.run()

    result = action.get_result()

    # in the event of a successful module execution, you will want to
    # simple AnsibleModule.exit_json(), passing the key/value results
    module.exit_json(**result)

# ------------------------------------------------------------------------------

def main():
    run_module()

if __name__ == '__main__':
    main()
